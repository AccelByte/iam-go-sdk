// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	iam "github.com/AccelByte/iam-go-sdk"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// ClientToken provides a mock function with given fields: opts
func (_m *Client) ClientToken(opts ...iam.Option) string {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(...iam.Option) string); ok {
		r0 = rf(opts...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ClientTokenGrant provides a mock function with given fields: opts
func (_m *Client) ClientTokenGrant(opts ...iam.Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...iam.Option) error); ok {
		r0 = rf(opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetClientInformation provides a mock function with given fields: namespace, clientID, opts
func (_m *Client) GetClientInformation(namespace string, clientID string, opts ...iam.Option) (*iam.ClientInformation, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, namespace, clientID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ClientInformation
	if rf, ok := ret.Get(0).(func(string, string, ...iam.Option) *iam.ClientInformation); ok {
		r0 = rf(namespace, clientID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ClientInformation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...iam.Option) error); ok {
		r1 = rf(namespace, clientID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRolePermissions provides a mock function with given fields: roleID, opts
func (_m *Client) GetRolePermissions(roleID string, opts ...iam.Option) ([]iam.Permission, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, roleID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []iam.Permission
	if rf, ok := ret.Get(0).(func(string, ...iam.Option) []iam.Permission); ok {
		r0 = rf(roleID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]iam.Permission)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...iam.Option) error); ok {
		r1 = rf(roleID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasBan provides a mock function with given fields: claims, banType, opts
func (_m *Client) HasBan(claims *iam.JWTClaims, banType string, opts ...iam.Option) bool {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, claims, banType)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*iam.JWTClaims, string, ...iam.Option) bool); ok {
		r0 = rf(claims, banType, opts...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HealthCheck provides a mock function with given fields: opts
func (_m *Client) HealthCheck(opts ...iam.Option) bool {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(...iam.Option) bool); ok {
		r0 = rf(opts...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// StartLocalValidation provides a mock function with given fields: opts
func (_m *Client) StartLocalValidation(opts ...iam.Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...iam.Option) error); ok {
		r0 = rf(opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserAnonymousStatus provides a mock function with given fields: claims, opts
func (_m *Client) UserAnonymousStatus(claims *iam.JWTClaims, opts ...iam.Option) (bool, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, claims)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*iam.JWTClaims, ...iam.Option) bool); ok {
		r0 = rf(claims, opts...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*iam.JWTClaims, ...iam.Option) error); ok {
		r1 = rf(claims, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserEmailVerificationStatus provides a mock function with given fields: claims, opts
func (_m *Client) UserEmailVerificationStatus(claims *iam.JWTClaims, opts ...iam.Option) (bool, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, claims)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*iam.JWTClaims, ...iam.Option) bool); ok {
		r0 = rf(claims, opts...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*iam.JWTClaims, ...iam.Option) error); ok {
		r1 = rf(claims, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserPhoneVerificationStatus provides a mock function with given fields: claims, opts
func (_m *Client) UserPhoneVerificationStatus(claims *iam.JWTClaims, opts ...iam.Option) (bool, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, claims)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*iam.JWTClaims, ...iam.Option) bool); ok {
		r0 = rf(claims, opts...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*iam.JWTClaims, ...iam.Option) error); ok {
		r1 = rf(claims, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateAccessToken provides a mock function with given fields: accessToken, opts
func (_m *Client) ValidateAccessToken(accessToken string, opts ...iam.Option) (bool, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, accessToken)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, ...iam.Option) bool); ok {
		r0 = rf(accessToken, opts...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...iam.Option) error); ok {
		r1 = rf(accessToken, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateAndParseClaims provides a mock function with given fields: accessToken, opts
func (_m *Client) ValidateAndParseClaims(accessToken string, opts ...iam.Option) (*iam.JWTClaims, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, accessToken)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.JWTClaims
	if rf, ok := ret.Get(0).(func(string, ...iam.Option) *iam.JWTClaims); ok {
		r0 = rf(accessToken, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.JWTClaims)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...iam.Option) error); ok {
		r1 = rf(accessToken, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateAudience provides a mock function with given fields: claims, opts
func (_m *Client) ValidateAudience(claims *iam.JWTClaims, opts ...iam.Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, claims)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.JWTClaims, ...iam.Option) error); ok {
		r0 = rf(claims, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidatePermission provides a mock function with given fields: claims, requiredPermission, permissionResources, opts
func (_m *Client) ValidatePermission(claims *iam.JWTClaims, requiredPermission iam.Permission, permissionResources map[string]string, opts ...iam.Option) (bool, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, claims, requiredPermission, permissionResources)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*iam.JWTClaims, iam.Permission, map[string]string, ...iam.Option) bool); ok {
		r0 = rf(claims, requiredPermission, permissionResources, opts...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*iam.JWTClaims, iam.Permission, map[string]string, ...iam.Option) error); ok {
		r1 = rf(claims, requiredPermission, permissionResources, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateRole provides a mock function with given fields: requiredRoleID, claims, opts
func (_m *Client) ValidateRole(requiredRoleID string, claims *iam.JWTClaims, opts ...iam.Option) (bool, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, requiredRoleID, claims)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, *iam.JWTClaims, ...iam.Option) bool); ok {
		r0 = rf(requiredRoleID, claims, opts...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *iam.JWTClaims, ...iam.Option) error); ok {
		r1 = rf(requiredRoleID, claims, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateScope provides a mock function with given fields: claims, scope, opts
func (_m *Client) ValidateScope(claims *iam.JWTClaims, scope string, opts ...iam.Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, claims, scope)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.JWTClaims, string, ...iam.Option) error); ok {
		r0 = rf(claims, scope, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
